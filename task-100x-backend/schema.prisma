datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

generator client {
  provider             = "prisma-client-py"
  recursive_type_depth = -1
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  name          String?
  phoneNumber   String?
  createdFrom   String         @default("platform") // 'platform' or 'csv'
  role          Role
  plans         Plan[]
  streak        Streak?
  cohortId      String?
  createdAt     DateTime       @default(now())
  quizAttempts  QuizAttempt[]
  notifications Notification[]
  launchpad     Launchpad?
}

enum Role {
  LEARNER
  INSTRUCTOR
}

model Cohort {
  id         String     @id @default(uuid())
  name       String
  totalWeeks Int
  startDate  DateTime
  endDate    DateTime
  resources  Resource[]
  plans      Plan[]
  quizzes    Quiz[]
  createdAt  DateTime   @default(now())
  sessions   Session[]
}

model Resource {
  id         String       @id @default(uuid())
  cohortId   String
  title      String
  url        String
  type       ResourceType
  duration   Int
  tags       String[]
  weekNumber Int
  isOptional Boolean      @default(false)

  tasks  Task[]
  cohort Cohort @relation(fields: [cohortId], references: [id])
}

enum ResourceType {
  VIDEO
  ARTICLE
  DOCUMENT
  QUIZ
}

model Plan {
  id        String   @id @default(uuid())
  userId    String
  cohortId  String
  createdAt DateTime @default(now())
  tasks     Task[]
  user      User     @relation(fields: [userId], references: [id])
  cohort    Cohort   @relation(fields: [cohortId], references: [id])
}

model Task {
  id         String  @id @default(uuid())
  planId     String
  resourceId String?
  quizId     String?

  status             TaskStatus
  timestamp          DateTime   @default(now())
  assignedDate       DateTime?
  completedAt        DateTime?
  time_spent_seconds Int        @default(0)
  plan               Plan       @relation(fields: [planId], references: [id])
  resource           Resource?  @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  quiz               Quiz?      @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

enum TaskStatus {
  PENDING
  COMPLETED
}

model Streak {
  userId                      String   @id
  currentStreak               Int      @default(0)
  weeklyStreak                Int      @default(0)
  lastWeeklyStreakAwardedWeek Int?
  lastCompletedDate           DateTime
  user                        User     @relation(fields: [userId], references: [id])
}

model Quiz {
  id           String        @id @default(uuid())
  cohortId     String
  weekNumber   Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  questions    Question[]
  cohort       Cohort        @relation(fields: [cohortId], references: [id])
  quizAttempts QuizAttempt[]
  tasks        Task[]
}

model Question {
  id           String       @id @default(uuid())
  quizId       String
  questionText String
  questionType String // e.g., 'MCQ'
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  quiz         Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options      Option[]
  quizAnswers  QuizAnswer[]
}

model Option {
  id          String       @id @default(uuid())
  questionId  String
  optionText  String
  isCorrect   Boolean
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  question    Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  quizAnswers QuizAnswer[]
}

model QuizAttempt {
  id          String   @id @default(uuid())
  quizId      String
  learnerId   String
  submittedAt DateTime @default(now())
  score       Int?

  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  quiz           Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  learner        User            @relation(fields: [learnerId], references: [id])
  quizAnswers    QuizAnswer[]
  feedbackReport FeedbackReport?
}

model QuizAnswer {
  id               String      @id @default(uuid())
  quizAttemptId    String
  questionId       String
  selectedOptionId String?
  answerText       String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  quizAttempt      QuizAttempt @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
  question         Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOption   Option?     @relation(fields: [selectedOptionId], references: [id])
}

model FeedbackReport {
  id            String      @id @default(uuid())
  quizAttemptId String      @unique
  reportContent String
  generatedAt   DateTime    @default(now())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  quizAttempt   QuizAttempt @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(uuid())
  studentId String
  sessionId String
  message   String
  status    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [studentId], references: [id])
}

model Session {
  id          String   @id @default(uuid())
  cohortId    String
  title       String
  description String
  weekNumber  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  cohort      Cohort   @relation(fields: [cohortId], references: [id])
}

model Launchpad {
  id     String @id @default(uuid())
  userId String @unique

  isStudent         Boolean
  workExperience    Boolean
  studyStream       String
  expectedOutcomes  String
  codingFamiliarity String
  pythonFamiliarity String
  languages         String
  yearsOfExperience String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])
}
